'use client';

import React, { useEffect, useState } from 'react';
import { useAppDispatch } from '@/shared/Hooks/useAppDispatch';
import { useAppSelector } from '@/shared/Hooks/useAppSelector';
import {
  createMyWork,
  getAllMyWorks,
  getMyWorkById,
  updateMyWork,
  deleteMyWork,
} from '../api/portfolio';
import { MyWork } from '../model';
import { Button, Modal, Upload, Table, Spin, Form, Input, message, Space } from 'antd';
import {
  UploadOutlined,
  EditOutlined,
  DeleteOutlined,
  EyeOutlined,
  PlusOutlined,
  MinusOutlined,
} from '@ant-design/icons';
import type { RcFile, UploadFile } from 'antd/es/upload/interface';
import { clearCurrentWork } from '../slice/portfolioSlice';

const PortfolioManager = () => {
  const dispatch = useAppDispatch();
  const { works, currentWork, loading, error } = useAppSelector((state) => state.myWork);
  const [form] = Form.useForm();
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
  const [deleteId, setDeleteId] = useState<number | null>(null);
  const [fileList, setFileList] = useState<UploadFile[]>([]);
  const [editMode, setEditMode] = useState(false);

  useEffect(() => {
    dispatch(getAllMyWorks());
  }, [dispatch]);

  useEffect(() => {
    if (error) {
      message.error(error);
    }
  }, [error]);

  useEffect(() => {
    if (currentWork && editMode) {
      let parsedSuccessWork: string[] = [];

      try {
        const successWork = currentWork.success_work;
        if (successWork !== undefined) {
          parsedSuccessWork = JSON.parse(successWork);
          if (!Array.isArray(parsedSuccessWork)) {
            parsedSuccessWork = [successWork];
          }
        } else {
          parsedSuccessWork = [];
        }
      } catch {
        parsedSuccessWork = [currentWork.success_work!];
      }

      form.setFieldsValue({
        title: currentWork.title,
        square: currentWork.square,
        quantity: currentWork.quantity,
        time: currentWork.time,
        success_work: parsedSuccessWork,
      });

      if (currentWork.image) {
        setFileList([
          {
            uid: '-1',
            name: 'current-image',
            status: 'done',
            url: currentWork.image,
          },
        ]);
      }
    } else {
      form.resetFields();
      setFileList([]);
    }
  }, [currentWork, editMode, form]);

  const showModal = () => setIsModalVisible(true);

  const handleCancel = () => {
    setIsModalVisible(false);
    setEditMode(false);
    dispatch(clearCurrentWork());
    form.resetFields();
    setFileList([]);
  };

  const handleCreate = () => {
    setEditMode(true);
    dispatch(clearCurrentWork());
    showModal();
  };

  const handleEdit = (id: number) => {
    dispatch(getMyWorkById(id));
    setEditMode(true);
    showModal();
  };

  const handleView = (id: number) => {
    dispatch(getMyWorkById(id));
    setEditMode(false);
    showModal();
  };

  const handleDelete = (id: number) => {
    setDeleteId(id);
    setIsDeleteModalVisible(true);
  };

  const confirmDelete = async () => {
    if (deleteId !== null) {
      try {
        await dispatch(deleteMyWork(deleteId)).unwrap();
        message.success('–†–∞–±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞');
        setIsDeleteModalVisible(false);
        dispatch(getAllMyWorks());
      } catch (err) {
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', err);
        setIsDeleteModalVisible(false);
      }
    }
  };

  const onFinish = async (
    values: Omit<MyWork, 'id' | 'image' | 'createdAt' | 'updatedAt'>,
  ) => {
    const formData = new FormData();

    // üëá –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º success_work –≤ —Å—Ç—Ä–æ–∫—É
    if (Array.isArray(values.success_work)) {
      formData.append('success_work', JSON.stringify(values.success_work));
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    Object.entries(values).forEach(([key, value]) => {
      if (key !== 'success_work') {
        formData.append(key, value);
      }
    });

    // –§–∞–π–ª
    if (fileList.length > 0 && fileList[0].originFileObj) {
      formData.append('image', fileList[0].originFileObj);
    }

    try {
      if (editMode && currentWork) {
        await dispatch(updateMyWork({ id: currentWork.id, formData })).unwrap();
        message.success('–†–∞–±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      } else {
        await dispatch(createMyWork(formData)).unwrap();
        message.success('–†–∞–±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞');
      }
      handleCancel();
    } catch (err) {
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
      console.error('–û—à–∏–±–∫–∞:', err);
    }
  };

  const columns = [
    {
      title: '–ù–∞–∑–≤–∞–Ω–∏–µ',
      dataIndex: 'title',
      key: 'title',
    },
    {
      title: '–ü–ª–æ—â–∞–¥—å',
      dataIndex: 'square',
      key: 'square',
    },
    {
      title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
      dataIndex: 'quantity',
      key: 'quantity',
    },
    {
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      key: 'actions',
      render: (_: any, record: MyWork) => (
        <Space>
          <Button icon={<EyeOutlined />} onClick={() => handleView(record.id)} />
          <Button icon={<EditOutlined />} onClick={() => handleEdit(record.id)} />
          <Button
            icon={<DeleteOutlined />}
            danger
            onClick={() => handleDelete(record.id)}
          />
        </Space>
      ),
    },
  ];

  const uploadProps = {
    onRemove: () => setFileList([]),
    beforeUpload: (file: RcFile) => {
      setFileList([
        {
          uid: Math.random().toString(36).substring(2),
          name: file.name,
          status: 'done',
          originFileObj: file,
        },
      ]);
      return false;
    },
    fileList,
    maxCount: 1,
  };

  return (
    <div style={{ padding: 24 }}>
      <Button type="primary" onClick={handleCreate} style={{ marginBottom: 16 }}>
        –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É
      </Button>

      <Spin spinning={loading}>
        <Table
          columns={columns}
          dataSource={works}
          rowKey={(record) => record.id.toString()}
          pagination={{ pageSize: 5 }}
        />
      </Spin>

      <Modal
        title={
          editMode
            ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É'
            : currentWork
            ? '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–±–æ—Ç—ã'
            : '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É'
        }
        open={isModalVisible}
        onCancel={handleCancel}
        footer={null}
        width={800}
      >
        {!editMode && currentWork ? (
          <div style={{ lineHeight: 1.8 }}>
            <h2>{currentWork.title}</h2>
            <p>
              <b>–ü–ª–æ—â–∞–¥—å:</b> {currentWork.square}
            </p>
            <p>
              <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {currentWork.quantity}
            </p>
            <p>
              <b>–í—Ä–µ–º—è:</b> {currentWork.time}
            </p>
            <div>
              <b>–ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ:</b>
              <ul>
                {(() => {
                  try {
                    const parsed = JSON.parse(currentWork.success_work || '[]');
                    return Array.isArray(parsed) ? (
                      parsed.map((item, idx) => <li key={idx}>{item}</li>)
                    ) : (
                      <li>{currentWork.success_work}</li>
                    );
                  } catch {
                    return <li>{currentWork.success_work}</li>;
                  }
                })()}
              </ul>
            </div>
            {currentWork.image && (
              <div style={{ marginTop: 12 }}>
                <img
                  src={currentWork.image}
                  alt="–ü—Ä–µ–≤—å—é"
                  style={{ maxWidth: '100%', maxHeight: 300, borderRadius: 8 }}
                />
              </div>
            )}
          </div>
        ) : (
          <Form
            form={form}
            layout="vertical"
            onFinish={onFinish}
            initialValues={{
              title: '',
              square: '',
              quantity: '',
              time: '',
              success_work: [''],
            }}
          >
            <Form.Item
              label="–ù–∞–∑–≤–∞–Ω–∏–µ"
              name="title"
              rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ' }]}
            >
              <Input />
            </Form.Item>

            <Form.Item label="–ü–ª–æ—â–∞–¥—å" name="square">
              <Input />
            </Form.Item>

            <Form.Item label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" name="quantity">
              <Input />
            </Form.Item>

            <Form.Item label="–í—Ä–µ–º—è" name="time">
              <Input />
            </Form.Item>

            <Form.List name="success_work">
              {(fields, { add, remove }) => (
                <>
                  {fields.map(({ key, name, ...restField }) => (
                    <Form.Item
                      key={key}
                      label={`–û–ø–∏—Å–∞–Ω–∏–µ ${name + 1}`}
                      {...restField}
                      name={name}
                      rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ' }]}
                    >
                      <Input />
                    </Form.Item>
                  ))}
                  <Form.Item>
                    <Button onClick={() => add()} icon={<PlusOutlined />}>
                      –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
                    </Button>
                    <Button
                      onClick={() => remove(fields.length - 1)}
                      icon={<MinusOutlined />}
                    >
                      –£–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
                    </Button>
                  </Form.Item>
                </>
              )}
            </Form.List>

            <Form.Item label="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ">
              <Upload {...uploadProps}>
                <Button icon={<UploadOutlined />}>–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª</Button>
              </Upload>
              {currentWork?.image && !fileList.length && (
                <img
                  src={currentWork.image}
                  alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                  style={{ maxWidth: '100%', maxHeight: 200, marginTop: 12 }}
                />
              )}
            </Form.Item>

            <Form.Item>
              <Button type="primary" htmlType="submit" loading={loading}>
                {editMode ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
              </Button>
            </Form.Item>
          </Form>
        )}
      </Modal>

      <Modal
        open={isDeleteModalVisible}
        onCancel={() => setIsDeleteModalVisible(false)}
        onOk={confirmDelete}
        okText="–£–¥–∞–ª–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
        title="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É?"
      >
        <p>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.</p>
      </Modal>
    </div>
  );
};

export default PortfolioManager;
